grammar MyReward;
options {
    language=Java;
}
/*
*	Parser Rules
*/

/*
standalone_event : STRING ':' '{' 'name' '=' 'description' '=' 'alt_id' '=' 'shortId' '=' 'version' '=' 'value' '=' 'unit' '=' 'effectiveDate' '=' 'expirationDate' '=' 'constraints' '=' '}';
*/
standalone_event 
   : value
   ;

obj
   : '{' pair (',' pair)* '}'
   | '{' '}'
   ;

pair
   : key+=STRING ':' data+=value
   ;

array
   : '[' value (',' value)* ']'
   | '[' ']'
   ;

value
   : STRING
   | NUMBER
   | obj
   | array
   | 'true'
   | 'false'
   | 'null'
   ;


STRING
   : '"' keywords+=(ESC | ~ ["\\])* '"' 
   ;
fragment ESC
   : '\\' (["\\/bfnrt] | UNICODE)
   ;
fragment UNICODE
   : 'u' HEX HEX HEX HEX
   ;
fragment HEX
   : [0-9a-fA-F]
   ;
NUMBER
   : '-'? INT ('.' [0-9] +)? EXP?
   ;
fragment INT
   : '0' | [1-9] [0-9]*
   ;
// no leading zeros
fragment EXP
   : [Ee] [+\-]? INT
   ;
// \- since - means "range" inside [...]
WS
   : [ \t\n\r] + -> skip
   ;